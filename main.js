const axiosClassic = require('axios');
const rateLimit  = require('axios-rate-limit');
require('dotenv').config()

const axios = rateLimit(axiosClassic.create(), { maxRPS: 50 })
const date = require('date-and-time');
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs')
const cron = require('node-cron');

const token = process.env.TOKEN;
const bot = new TelegramBot(token, {polling: true});

let phraseHours = new Date();
let hours = phraseHours.getHours();

const categories = ['front-end', 'backend', 'cli', 'documentation', 'css', 'testing', 'iot', 'coverage', 'mobile', 'framework', 'robotics', 'math'];
const Channelid = process.env.ID;

const phrases = [
    '–ê –≤–æ—Ç –∏ –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç!',
    '–ö–∞–∫–∞—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç—å, –≤–µ–¥—å –≤—ã—à–µ–ª –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç!',
    `${hours} —á–∞—Å–æ–≤ –∫–∞–∫ —Ä–∞–∑ —Ç–æ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –æ –Ω–æ–≤–æ–º –ø–∞–∫–µ—Ç–µ!`,
    '–ï—Å–ª–∏ —Ç—ã –∏—Å–∫–∞–ª –≥–æ–¥–Ω—ã–π –ø–∞–∫–µ—Ç, —Ç–æ —Ç–µ–±–µ —Å—é–¥–∞!',
    '–ú—ã —Å–Ω–æ–≤–∞ —Ä–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!',
    '–ù–µ –¥–∞–≤–∞–π –∑–ª—ã–º —Å–∏–ª–∞–º –æ–¥–æ–ª–µ—Ç—å —Ç–µ–±—è, –∞ –ª—É—á—à–µ –≤–æ–∑—å–º–∏ –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç!',
    '–ï—Å–ª–∏ —á—Ç–æ, –≤ –ø–∞–∫–µ—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ç–µ–±–µ –¥–∞–µ–º - –Ω–∏—á–µ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –Ω–µ—Ç, —Ç–∞–∫ —á—Ç–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π)',
    '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫—É–ø–∏—Ç—å —Å—á–∞—Å—Ç—å–µ –Ω–µ—Ç, –Ω–æ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á–µ–∫–Ω—É—Ç—å –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç ( —á—Ç–æ –≤–ø—Ä–∏–Ω—Ü–∏–ø–µ –æ–¥–Ω–æ –∏ —Ç–æ–∂–µ :) )',
    'IF(—Ç—ã –Ω–µ —Å—á–∞—Å—Ç–ª–∏–≤) {–¥–∞—Ç—å –ø–∞–∫–µ—Ç} ELSE {–≤—Å–µ —Ä–∞–≤–Ω–æ –¥–∞—Ç—å –ø–∞–∫–µ—Ç}',
    '–ö–æ–Ω–µ—á–Ω–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –¥–µ–Ω—å —Å —á–µ–≥–æ-—Ç–æ –¥—Ä—É–≥–æ–≥–æ, –Ω–æ –ª—É—á—à–µ –Ω–∞—á–Ω–∏ –µ–≥–æ —Å –Ω–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞!',
    '–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ –Ω–∞—á–∞—Ç—å –¥–µ–Ω—å —Å –Ω–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞!',
    '–ö–∞–∫-–Ω–∏–∫–∞–∫, –∞ –ø–∞–∫–µ—Ç—ã –≤—Å–µ–≥–¥–∞ –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è!',
    '–ê –∫—Ç–æ —Ç—É—Ç —É –Ω–∞—Å –µ—â—ë –ø–∞–∫–µ—Ç –Ω–µ —á–µ–∫–Ω—É–ª, –∞?'
]

const later = new Date();
const start = new Date();
const end = new Date();

start.setDate(start.getDate() - 7);
later.setDate(later.getDate() - 14);

const laterDate = date.format(later, 'YYYY-MM-DD');
const endDate = date.format(end, 'YYYY-MM-DD'); // date now
const startDate = date.format(start, 'YYYY-MM-DD'); // week ago

async function get() {
    const results = [];

    for (const item of categories) {
        const { data } = await axios.get(`https://api.npms.io/v2/search/?q=keywords:${item}+popularity-weight:100`);
        results.push(data.results);
    }
    return results;
}
cron.schedule('0 7 * * *', () => {
    (async () => {
        console.log(`Report by ${endDate}`)
        const content = await get();

        const result = await Promise.all(
            content.map(async (item) => Promise.all(item.map(async (obj) => {
                const { data } = await axios.get(`https://api.npmjs.org/downloads/point/${startDate}:${endDate}/${obj.package.name}`);

                return {
                    name: obj.package.name,
                    link: obj.package.links.npm,
                    descr: obj.package.description,
                    date: obj.package.date,
                    downloads: data.downloads,
                };
            }))),
        );

        let finalresult = result.flat().sort((a,b) =>
            new Date(b.date) - new Date(a.date));

        let i = Math.floor(Math.random() * finalresult.length)
        async function output() {
            try {
                if(JSON.parse(fs.readFileSync('blacklist.json', 'utf8')).indexOf(finalresult[i].name) >= 0) {
                    i = Math.floor(Math.random() * finalresult.length)
                    output()
                }else{
                    let random = Math.floor(Math.random() * phrases.length)
                    const { data } = await axios.get(`https://api.npmjs.org/downloads/point/${laterDate}:${startDate}/${finalresult[i].name}`);
                    const percent = Math.floor((finalresult[i].downloads * 100 / data.downloads))
                    if(percent > 90 && finalresult[i].downloads >= 1000 && finalresult[i].downloads < 2000000) {
                        if(finalresult[i].date.split("T")[0].split("-")[0] >= 2020) {
                            hours = phraseHours.getHours();
                            bot.sendMessage(Channelid, `${phrases[random]}\n\n‚òë –ù–∞–∑–≤–∞–Ω–∏–µ: ${finalresult[i].name}\nüìã –û–ø–∏—Å–∞–Ω–∏–µ: ${finalresult[i].descr}\nüìä –°–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é: ${finalresult[i].downloads}\n‚ö° –°—Å—ã–ª–∫–∞: ${finalresult[i].link}\nüìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${finalresult[i].date.split("T")[0]}`)
                            let temp = JSON.parse(fs.readFileSync('blacklist.json', 'utf8'))
                            temp.push(finalresult[i].name)
                            fs.writeFileSync('blacklist.json', JSON.stringify(temp))
                        }else{
                            i = Math.floor(Math.random() * finalresult.length)
                            output()
                        }
                    }else{
                        i = Math.floor(Math.random() * finalresult.length)
                        output()
                    }
                }
            }catch (e) {
                output()
            }
        }
        output()
    })();
});
